import streamlit as st
import time
import os
import json
import base64
from sqlalchemy import create_engine, event, text, insert
from sqlalchemy.exc import DBAPIError, SQLAlchemyError
from sqlalchemy.orm import sessionmaker

st.set_page_config(
    layout="wide",
    initial_sidebar_state="expanded",
    menu_items={
        'Report a bug': 'mailto:huta@mbank.pl?subject=DMSF%20%E2%80%93%20nieprawid%C5%82owe%20dzia%C5%82anie%20aplikacji%20Streamlit',
        'About': "Raport z przetwarza≈Ñ - DMSF"
    }
)
st.logo(image="images/dmsf_logo.png", size="large")


session_default_values = {
    'logged_in': False,
    'username': "",
    'password': "",
    'admin': False,
    'streamlit_privilege': "",
    'ldap_conn': None,
    'dbschema': None
}

for key, val in session_default_values.items():
    if key not in st.session_state:
        st.session_state[key] = val

def context_loadout(): ##! app-rad
  data = st.context.headers["X-Ms-Client-Principal"]
  missing_padding = len(data) % 4
  if missing_padding:
      data += '=' * (4 - missing_padding)

  decoded = base64.b64decode(data)
  decoded_json = json.loads(decoded.decode("utf-8"))
  st.session_state.claims = decoded_json.get("claims", [])


def get_claim_value(claims: list, claim_type: str) -> str:
  return next(
  (claim["val"] for claim in claims if claim.get("typ") == claim_type),
  f"Nie znaleziono pola '{claim_type}'"
  )

def has_claim_value(claims: list, claim_type: str, expected_value: str) -> bool:
  return any(
    claim.get("typ") == claim_type and claim.get("val") == expected_value
    for claim in claims
  )

def initConnection():
    st.session_state.dbusername = "UI_ZEW_2_33905[DEV02_DMSF_CML]" ##! app-rad
    # st.session_state.dbusername = "UI_" + st.session_state.username + "[" + st.session_state.dbschema + "]"  ##! Revert-debug
    st.session_state.password = os.environ.get("DBPASS","") ## zmienna w app service - has≈Ço do oracle ##! app-rad
    dsn = '(DESCRIPTION = (ADDRESS = (PROTOCOL = TCP)(HOST = exa2-scan.mbank.pl)(PORT = 1521)) (CONNECT_DATA = (SERVER = DEDICATED) (SERVICE_NAME = FINREP_DEV_UI)))'
    connection_string = f"oracle+oracledb://{st.session_state.dbusername}:{st.session_state.password}@{dsn}"
    engine = create_engine(connection_string)

    try:
        with engine.connect() as conn:
            if conn is not None:
                return True
            else:
                return False
    except SQLAlchemyError as e:
        return False

def login():
    c1, c2, c3 = st.columns([3, 3, 3])
    with c2:
        # context_loadout() ##! app-rad
        st.image("images/streamlit_logo.png")
        container = st.container(border=True)
        container.title("DMSF ≈örodowisko DEV - wersja 001.027.00")
        container.caption("Powered by :blue[Streamlit!]")
        # st.session_state.streamlit_privilege = (has_claim_value(st.session_state.claims, "groups", "512bc6b1-b534-49df-b5f4-618da7b012d9")) ##! app-rad
        # st.session_state.username = container.text_input("Witaj", key="username_input", disabled=True, placeholder=get_claim_value(st.session_state.claims, "name")) ##! app-rad
        # st.session_state.password = os.environ.get("DBPASS","") ## zmienna w app service - has≈Ço do oracle ##! app-rad
        # st.session_state.dbschema = "DEV01_FATCRS"
        # st.session_state.username = st.text_input("Username", key="username_input")  ##! Revert-debug
        # st.session_state.password = st.text_input("db-debug-Password", key="password_input", type='password')  ##! Revert-debug
        # st.session_state.dbschema = st.text_input("Schema name", placeholder='np. DEV01_FATCRS')  ##! Revert-debug

        if container.button("Przejd≈∫ dalej", key="login_button"):
            with st.status("Inicjalizacja aplikacji...", expanded=True) as status:
                time.sleep(0.5)
                status.update(label="Aplikacja za≈Çadowana...", state="complete", expanded=True)
                time.sleep(1)
                st.session_state.logged_in = True
                if initConnection():
                    st.toast(f"Connected", icon="‚úÖ")
                    st.session_state.logged_in = True
                    time.sleep(0.5)
                else:

                    st.session_state.logged_in = False
                    st.toast(f"Database connection failed", icon="‚ùå")
                    time.sleep(0.5)

                st.rerun()

def logout():
    st.session_state.logged_in = False
    st.session_state.username = ""
    st.session_state.password = ""
    st.session_state.admin = False
    st.cache_data.clear()
    st.rerun()

login_page = st.Page(login, title="Zaloguj", icon=":material/login:")
logout_page = st.Page(logout, title="Wyloguj", icon=":material/logout:")
pages = [
    st.Page(
        "pages/home.py",
        title="Przetwarzania DMSF",
        icon=":material/monitor_heart:",
        default=True
    ),
    st.Page(
        "pages/errors.py",
        title="B≈Çƒôdy przetwarza≈Ñ",
        icon=":material/error:"
    ),
    st.Page(
        "pages/logs.py",
        title="LOGi Data Quality",
        icon=":material/analytics:"
    )
]

if st.session_state.logged_in:
    pg_nav = {
        "üè† Konto": [logout_page],
        "üìä Raporty": pages
    }
    st.sidebar.markdown("**Zalogowany: :green-background[" + "TEST user" + "]**")  #get_claim_value(st.session_state.claims, "name")
    if 1 == 1:  # st.session_state.streamlit_privilege == True:
        st.sidebar.markdown(":blue-badge[:material/verified: Zweryfikowany] :green-badge[:material/deployed_code_update: app v.1.027.00] :orange-badge[:material/manufacturing: in development]")
    else:
        st.sidebar.markdown(":violet-badge[:material/dangerous: Niezweryfikowany] :green-badge[:material/deployed_code_update: app v.1.027.00] :orange-badge[:material/manufacturing: in development]")
    st.sidebar.divider()
else:
    pg_nav = {"Account": [login_page]}

pg = st.navigation(pg_nav)
pg.run()


st.markdown(
    """
    <style>
    .sidebar-footer {
        position: fixed;
        bottom: 0;
        left: 0;
        width: 100%;
        padding: 10px;
        text-align: center;
        font-size: 0.9em;
        color: gray;
    }
    </style>
    <div class="sidebar-footer">
        Made with ‚ù§Ô∏è from HUTA
    </div>
    """,
    unsafe_allow_html=True
)
