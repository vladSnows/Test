import re
import streamlit as st
from sqlalchemy import event, Column, String, Integer, DateTime, create_engine, insert, text

PROCESSING_STATE_QUERY = """
    SELECT * FROM (
        SELECT
            PROCESSING_NAME AS "PROCESSING NAME",
            BATCH_ID AS "BATCH ID",
            PROCESSING_DATE AS "PROCESSING DATE",
            PROCESSING_STATE AS "PROCESSING STATE",
            PRC_PERIOD_FLAG AS "PRC PERIOD FLAG",
            PROCESSING_MODE AS "PROCESSING MODE",
            SCHEDULING_DATE AS "SCHEDULING_DATE"
        FROM DEV03_DMSF_CML.MT_PROCESSING_STATE
        WHERE
            (:processing_name IS NULL OR PROCESSING_NAME = :processing_name)
            AND (:processing_date IS NULL OR PROCESSING_DATE = :processing_date)
        ORDER BY PROCESSING_DATE DESC
    )
    OFFSET {offset} ROWS FETCH NEXT {limit} ROWS ONLY
"""
def getEngine():
    # Check if engine already exists in session_state
    if "engine" in st.session_state:
        if st.session_state.engine is not None:
            return st.session_state.engine

    # Build connection string
    st.session_state.dbusername = "UI_ZEW_2_33905[DEV03_DMSF_CML]" ##! app-rad
    # st.session_state.dbusername = "UI_" + st.session_state.username + "[" + st.session_state.dbschema + "]"
    dsn = '(DESCRIPTION = (ADDRESS = (PROTOCOL = TCP)(HOST = exa2-scan.mbank.pl)(PORT = 1521)) (CONNECT_DATA = (SERVER = DEDICATED) (SERVICE_NAME = FINREP_DEV_UI)))'
    connection_string = f"oracle+oracledb://{st.session_state.dbusername}:{st.session_state.password}@{dsn}"

    # Create engine with pool settings
    engine = create_engine(connection_string, pool_size=10, max_overflow=20, pool_timeout=30)

    # def extract_table_name(statement: str) -> str:
    #     match = re.search(r'\b(?:FROM|INTO|UPDATE|DELETE FROM)\s+([^\s(]+)', statement, re.IGNORECASE)
    #     return match.group(1).upper() if match else "UNKNOWN"
    #
    # @event.listens_for(engine, "before_cursor_execute")
    # def before_cursor_execute(conn, cursor, statement, parameters, context, executemany):
    #     table_name = extract_table_name(statement)
    #
    #     normalized_tbl_name = table_name.replace('"', '').upper()
    #     crud = statement[0:6].upper()
    #     # print(f"{statement} --> PARAMETERS: {str(parameters)}")
    #     if normalized_tbl_name.upper() != "STRMLT_LOG_TABLE".upper():
    #         if crud != 'SELECT':
    #             log_sql(engine, st.session_state.dbusername, table_name,
    #                     f"{statement} --> PARAMETERS: {str(parameters)}")

    # Store engine in session_state for reuse
    st.session_state.engine = engine
    return engine
